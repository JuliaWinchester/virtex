interface IOptions {
    id: string;
    object: string;
    ambientLightColor: number;
    cameraZ: number;
    directionalLight1Color: number;
    directionalLight1Intensity: number;
    directionalLight2Color: number;
    directionalLight2Intensity: number;
    fadeSpeed: number;
    far: number;
    fov: number;
    near: number;
    shading: THREE.Shading;
    shininess: number;
    showStats: boolean;
}

declare class Virtex {
    options: IOptions;
    private _$element;
    private _$viewport;
    private _$loading;
    private _$loadingBar;
    private _stats;
    private _camera;
    private _scene;
    private _renderer;
    private _lightGroup;
    private _modelGroup;
    private _viewportHalfX;
    private _viewportHalfY;
    private _targetRotationX;
    private _targetRotationOnMouseDownX;
    private _targetRotationY;
    private _targetRotationOnMouseDownY;
    private _mouseX;
    private _mouseXOnMouseDown;
    private _mouseY;
    private _mouseYOnMouseDown;
    private _scale;
    private _zoomSpeed;
    private _dollyStart;
    constructor(options: IOptions);
    private _init();
    private _loadProgress(progress);
    private _onDocumentMouseDown(event);
    private _onDocumentMouseMove(event);
    private _onDocumentMouseUp(event);
    private _onDocumentMouseOut(event);
    private _onDocumentTouchStart(event);
    private _onDocumentTouchMove(event);
    private _onMouseWheel(event);
    private _dollyIn(dollyScale?);
    private _dollyOut(dollyScale?);
    private _getZoomScale();
    private _draw();
    private _render();
    private _getWidth();
    private _getHeight();
    private _resize();
}
export = Virtex;
